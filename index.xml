<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Harth Programming Language</title>
    <link>http://www.harth-lang.org/</link>
    <description>Recent content on Harth Programming Language</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Mar 2016 11:57:19 -0800</lastBuildDate>
    <atom:link href="http://www.harth-lang.org/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Syntax Ideas and Prototype Examples</title>
      <link>http://www.harth-lang.org/blog/2016/03/01/syntax-ideas-and-prototype-examples/</link>
      <pubDate>Tue, 01 Mar 2016 11:57:19 -0800</pubDate>
      
      <guid>http://www.harth-lang.org/blog/2016/03/01/syntax-ideas-and-prototype-examples/</guid>
      <description>

&lt;h1 id=&#34;familiarity-with-fully-reified-immutable-and-homoiconic:656c0d85793f7695097199a3e4d2b870&#34;&gt;Familiarity with Fully Reified, Immutable, and Homoiconic.&lt;/h1&gt;

&lt;h2 id=&#34;familiar:656c0d85793f7695097199a3e4d2b870&#34;&gt;Familiar&lt;/h2&gt;

&lt;p&gt;The syntax and text of a &lt;a href=&#34;http://www.harth-lang.org/&#34;&gt;Harth&lt;/a&gt; program should be familiar to most programmers.&lt;/p&gt;

&lt;h2 id=&#34;reified:656c0d85793f7695097199a3e4d2b870&#34;&gt;Reified&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Reification_(computer_science)&#34;&gt;Reified&lt;/a&gt; means that all levels of the programming language model (text,
  lexical/tokens, AST, Semantic Model, Project, Binaries) are processed and available at run-time
  as ordinary data.&lt;/p&gt;

&lt;p&gt;The data where possible immutable (or near enough).&lt;/p&gt;

&lt;h2 id=&#34;immutable:656c0d85793f7695097199a3e4d2b870&#34;&gt;Immutable&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Immutable_object&#34;&gt;Immutable&lt;/a&gt; data gives greater flexibility for shared state, caching, checksum, versioning, undo.&lt;/p&gt;

&lt;h2 id=&#34;homoiconic:656c0d85793f7695097199a3e4d2b870&#34;&gt;Homoiconic&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Homoiconicity&#34;&gt;Homoiconic&lt;/a&gt; means that the text, lexemes, tokens, AST, Semantic data,
Project and binaries have the same shared written syntax (in human
and/or binary) as any other language data and/or code.&lt;/p&gt;

&lt;p&gt;Thus the distinction between code, data, and functionality blurs.&lt;/p&gt;

&lt;h1 id=&#34;text-to-semantic-flow:656c0d85793f7695097199a3e4d2b870&#34;&gt;Text to Semantic Flow&lt;/h1&gt;

&lt;h2 id=&#34;input-output:656c0d85793f7695097199a3e4d2b870&#34;&gt;Input/Output&lt;/h2&gt;

&lt;p&gt;Text is read from any stream of characters and internally represented
by a &lt;code&gt;Char*&lt;/code&gt;, an abstract sequence of zero or more Unicode characters.&lt;/p&gt;

&lt;p&gt;Note that &lt;code&gt;Char&lt;/code&gt; and &lt;code&gt;Sequence&amp;lt;Lexeme&amp;gt;&lt;/code&gt; are immutable data structures.&lt;/p&gt;

&lt;h2 id=&#34;lexical-analysis:656c0d85793f7695097199a3e4d2b870&#34;&gt;Lexical Analysis&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Lexer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Lexeme&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Method takes some &lt;code&gt;text&lt;/code&gt; of type &lt;code&gt;Char*&lt;/code&gt;; a sequence of Unicode characters of any valid Unicode value.&lt;/p&gt;

&lt;p&gt;The method returns &lt;code&gt;Lexeme*&lt;/code&gt;; that is zero or more &lt;code&gt;Lexeme&lt;/code&gt; objects.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tabs and spaces are usually only significant in determining lexeme boundaries.&lt;/li&gt;
&lt;li&gt;C, C++ and shell script style comments:

&lt;ul&gt;
&lt;li&gt;C means &lt;code&gt;/* block */&lt;/code&gt; (allows proper nesting)&lt;/li&gt;
&lt;li&gt;C++ means &lt;code&gt;// line&lt;/code&gt; (for comment to end of line)&lt;/li&gt;
&lt;li&gt;Shell script means &lt;code&gt;#!&lt;/code&gt; is allowed (rest of line is special script comment).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Lexemes are any valid characters.

&lt;ul&gt;
&lt;li&gt;Escaping and UTF encodings as allowed by C, C++ and other languages:&lt;/li&gt;
&lt;li&gt;Example &lt;code&gt;\n&lt;/code&gt; means a literal newline, raw newlines in source are usually not significant.&lt;/li&gt;
&lt;li&gt;Example &lt;code&gt;\r&lt;/code&gt; means a literal carriage return, again these are ignored.&lt;/li&gt;
&lt;li&gt;Internally any &lt;code&gt;\n&lt;/code&gt; and/or &lt;code&gt;\r&lt;/code&gt; pair or single character sequence is counted as &amp;ldquo;end of line&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Lexemes are split into several categories:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BuiltinToken&lt;/code&gt;: Builtin to the language itself (eg. &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NameToken&lt;/code&gt;: Any other symbol formed of unrecognized alpha-numeric or symbol characters.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReaderToken&lt;/code&gt;: A special token reader, (eg. &lt;code&gt;&amp;quot;text&amp;quot;&lt;/code&gt; is implemented as a special reader function).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CommentTrivia&lt;/code&gt;: A comment span.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WhitespaceTrivia&lt;/code&gt;: Any other whitespace.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ErrorTrivia&lt;/code&gt;: Some synthetic error detected by the lexer (eg. EOF in unterminated string or comment).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Lexemes have known start, end, and character counts (in terms of Unicode characters).&lt;/li&gt;
&lt;li&gt;These start/end points can be mapped to source code file, line and columns.&lt;/li&gt;
&lt;li&gt;Note that &lt;code&gt;Lexeme&lt;/code&gt; and &lt;code&gt;Sequence&amp;lt;Lexeme&amp;gt;&lt;/code&gt; are immutable data structures.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;lexemes-to-parse-tree:656c0d85793f7695097199a3e4d2b870&#34;&gt;Lexemes to Parse Tree&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Lexeme*&lt;/code&gt; is further processed by a recursive descent parser (eventually hand written).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;lexemes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Lexeme&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NodeTree&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Method takes some &lt;code&gt;lexemes&lt;/code&gt; of type &lt;code&gt;Lexeme*&lt;/code&gt;; a sequence of zero or more &lt;code&gt;Lexeme&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The method returns a &lt;code&gt;NodeTree&lt;/code&gt; which represents any valid or invalid
AST tree of &lt;code&gt;Node&lt;/code&gt;, essentially a view of the AST tree as a
&lt;a href=&#34;https://www.safaribooksonline.com/library/view/language-implementation-patterns/9781680500097/f_0045.html&#34;&gt;Homogeneous AST&lt;/a&gt;. This view and the underlyig data in immutable.&lt;/p&gt;

&lt;p&gt;This means the source text, lexeme and AST syntax tree can be easily
versioned, editted, undo using functional style immutable data
structures (which are provided by &lt;a href=&#34;http://www.harth-lang.org/&#34;&gt;Harth&lt;/a&gt; in the standard library).&lt;/p&gt;

&lt;h2 id=&#34;semantic-analysis-of-parse-tree:656c0d85793f7695097199a3e4d2b870&#34;&gt;Semantic Analysis of Parse Tree&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Semantic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Analyze&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NodeTree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SemanticModel&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The tree input of type &lt;code&gt;NodeTree&lt;/code&gt; is converted into a static
&lt;code&gt;SemanticModel&lt;/code&gt; instance; from the outside perspective this is
immutable (it&amp;rsquo;s actually either &amp;ldquo;frozen&amp;rdquo; once completed and/or backed
by immutable data such as the &lt;code&gt;Lexeme*&lt;/code&gt; and &lt;code&gt;NodeTree&lt;/code&gt; instances).&lt;/p&gt;

&lt;p&gt;Semantic Analysis is useful fairly expensive, so caching these results
might be useful both for the user of the library and the provider
(which may share some cached/immutable data as is possible).&lt;/p&gt;

&lt;p&gt;Again this state can be serialized and deserialized in human or binary forms.&lt;/p&gt;

&lt;p&gt;Externally the &lt;code&gt;SemanticModel&lt;/code&gt; allows the programmer (and thus all
tools) to ask any semantic, syntactic, lexical, or textual question.&lt;/p&gt;

&lt;p&gt;Typically the analysis phase is responsible for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Checking the syntax tree is well formed.&lt;/li&gt;
&lt;li&gt;Checking there are no lexical or parsing errors.&lt;/li&gt;
&lt;li&gt;Determining resolution to name bindings from their definition(s) to any reference(s).&lt;/li&gt;
&lt;li&gt;Maintaining identity relationships between components (binaries, libraries).

&lt;ul&gt;
&lt;li&gt;Each component contains fully resolved (to dependent components).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Maintaining (cached) name binding maps from def-ref lookups.

&lt;ul&gt;
&lt;li&gt;Useful for completion, documentation, searching, index etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Caching the &lt;code&gt;SemanticModel&lt;/code&gt; with the equivalent previous levels allows
for almost instant restarts; the models are all checksummed/hashed for
fast comparison checks. Any tool would start by:&lt;/p&gt;

&lt;h2 id=&#34;startup-and-caching-model:656c0d85793f7695097199a3e4d2b870&#34;&gt;Startup and Caching Model&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Look at text model (collection of &lt;code&gt;Char*&lt;/code&gt; stored in files, memory, repositories etc).&lt;/li&gt;
&lt;li&gt;If this matches existing &lt;code&gt;Lexical&lt;/code&gt; and/or &lt;code&gt;NodeTree&lt;/code&gt; and/or &lt;code&gt;SemanticModel&lt;/code&gt; read these,
ensuring they all match each other exactly.&lt;/li&gt;
&lt;li&gt;If not matching, compute the updated versions and cache to disk as required.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This data is also immutable and can thus be safely shared between
machines, processes, and/or threads over any connection type.&lt;/p&gt;

&lt;p&gt;Essentially all tools wherever they are have the best chance of
instantly reading all source code at the highest fidelity - using the least
amount of work (at least this time). That is approaching &amp;ldquo;Read many, write once&amp;rdquo; levels.&lt;/p&gt;

&lt;h2 id=&#34;compiler-script-and-repl:656c0d85793f7695097199a3e4d2b870&#34;&gt;Compiler, Script and REPL&lt;/h2&gt;

&lt;p&gt;The backend of the Compiler essentially looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Anything&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;files&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SemanticModel&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SemanticModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Project&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;project&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Project&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Executable&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Executable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Anything&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A &lt;code&gt;Project&lt;/code&gt; is the fully reified and homoiconic representation of an
executable program; by default it contains an immutable representation
of all semantic information, code, binaries, libraries, debug
information etc.&lt;/p&gt;

&lt;p&gt;The method &lt;code&gt;Eval&lt;/code&gt; is a short cut for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lexer/Read to Parser/Read to Semantic/Analyze to Compiler/Compile to Compiler/Link to Compiler/Run.

&lt;ul&gt;
&lt;li&gt;That is text arbitary text and try to execute it Just-In-Time (JIT).&lt;/li&gt;
&lt;li&gt;Suitable for implementing a REPL and/or script.&lt;/li&gt;
&lt;li&gt;Additional shared state (variables, scope, etc) allowed in an &amp;ldquo;environment&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The method &lt;code&gt;Load&lt;/code&gt; allows for a number of files to be loaded into a &lt;code&gt;SemanticModel&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;files&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;files&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReadFiles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;trees&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lexer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SourceText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NodeTree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CreateProjectWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trees&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Semantic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Analyze&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The methods &lt;code&gt;Compile&lt;/code&gt;, &lt;code&gt;Link&lt;/code&gt; and &lt;code&gt;Run&lt;/code&gt; allow for finer control.&lt;/p&gt;

&lt;h3 id=&#34;compiler:656c0d85793f7695097199a3e4d2b870&#34;&gt;Compiler&lt;/h3&gt;

&lt;p&gt;A compiler might look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;project&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;executable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;executable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;abort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Anything&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Compilation success&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;script-interpreter:656c0d85793f7695097199a3e4d2b870&#34;&gt;Script Interpreter&lt;/h3&gt;

&lt;p&gt;A script interpreter might look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;project&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;executable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;executable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;abort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Anything&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;%O&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;script-interpreter-1:656c0d85793f7695097199a3e4d2b870&#34;&gt;Script Interpreter&lt;/h3&gt;

&lt;p&gt;A REPL interpreter might look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Stdin&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EOF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReadLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Harth&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PrintStackTrace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Anything&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;%O&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;debugging:656c0d85793f7695097199a3e4d2b870&#34;&gt;Debugging?&lt;/h2&gt;

&lt;p&gt;The debugger essentially provides a few basic helpers on top of
semantic name and source text resolution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Debugger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;functionName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Location&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Debugger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;fileName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;column&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Location&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Debugger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;loc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Breakpoint&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;Breakpoint&lt;/code&gt; result can be modified for single shot, read/write, conditional etc.&lt;/p&gt;

&lt;p&gt;Additionally the JIT and/or compiler can live insert any compiled
expression (actually a parsed &lt;code&gt;NodeTree&lt;/code&gt;) into code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Debugger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LiveEdit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;loc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NodeTree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since all internal data can be converted to human string with
&lt;code&gt;ToString()&lt;/code&gt; and/or &lt;code&gt;printf&lt;/code&gt;, a watch point might be implemented by
&lt;code&gt;LiveEdit&lt;/code&gt; insertion of &lt;code&gt;printf()&lt;/code&gt; for each variable and/or state.&lt;/p&gt;

&lt;p&gt;Breakpoints are trivial therefore; they stop execution of all tasks under the current process except for the &lt;code&gt;Debugger/Task&lt;/code&gt; instance which continues running under process control so that all other tasks can be monitored.&lt;/p&gt;

&lt;p&gt;Implementations of some other fundamental functions such as
&lt;code&gt;Debugger/Continue()&lt;/code&gt;, &lt;code&gt;Run()&lt;/code&gt;, &lt;code&gt;Step()&lt;/code&gt; and &lt;code&gt;Next()&lt;/code&gt; can be
implemented using semantic information.&lt;/p&gt;

&lt;h2 id=&#34;backend-binary-generator:656c0d85793f7695097199a3e4d2b870&#34;&gt;Backend Binary Generator&lt;/h2&gt;

&lt;p&gt;The backend binary and object generator uses the latest &lt;a href=&#34;http://llvm.org&#34;&gt;LLVM&lt;/a&gt; to
convert a &lt;code&gt;SemanticModel&lt;/code&gt; into an internal set of linkage/executable
&lt;code&gt;LLVM/Module*&lt;/code&gt;. These are either cached and/or written to disk as
appropriate.&lt;/p&gt;

&lt;h1 id=&#34;programming-language-examples:656c0d85793f7695097199a3e4d2b870&#34;&gt;Programming Language Examples&lt;/h1&gt;

&lt;h2 id=&#34;example-1-hello-world:656c0d85793f7695097199a3e4d2b870&#34;&gt;Example 1: Hello World&lt;/h2&gt;

&lt;p&gt;The basic program (executable, script or REPL) is to print &amp;ldquo;Hello World&amp;rdquo;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;1 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;2 &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;3 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Hello World!&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;4 &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code can be made into an executable, shell script or typed interactively at a REPL:&lt;/p&gt;

&lt;div class=&#34;harth-console-panel&#34;&gt;
  &lt;pre class=&#34;harth-console&#34;&gt;
bash$ ls -l /usr/local/bin .
-rwxr-xr-x  1 harveyt  staff  1184 Nov 26 11:04 /usr/local/bin/harth
lrwxr-xr-x  1 harveyt  staff  1184 Nov 26 11:04 /usr/local/bin/harth-compiler -&amp;gt; /usr/local/bin/harth
lrwxr-xr-x  1 harveyt  staff  1184 Nov 26 11:04 /usr/local/bin/hc -&amp;gt; /usr/local/bin/harth
-rw-r--r--  1 harveyt  staff  1184 Nov 26 11:04 HelloWorld.ha
bash$ hc HelloWorld
bash$ ls -l .
-rwxr-xr-x  1 harveyt  staff  1184 Nov 26 11:04 HelloWorld
bash$ ./HelloWorld
Hello World!\n
bash$
&lt;/pre&gt;
&lt;/div&gt;


&lt;h3 id=&#34;notes-for-line-1:656c0d85793f7695097199a3e4d2b870&#34;&gt;Notes for line &lt;strong&gt;1&lt;/strong&gt;:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;function&lt;/code&gt; denotes that a function name, type and body will appear.

&lt;ul&gt;
&lt;li&gt;There is no container, it&amp;rsquo;s global scope.&lt;/li&gt;
&lt;li&gt;This is suitable for binary, script and/or REPL.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;package&lt;/code&gt; and &lt;code&gt;import&lt;/code&gt; are the defaults.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt; takes only one argument, the &lt;code&gt;String&lt;/code&gt; passed to the executable and/or script.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&lt;/code&gt; means variable value is unamed and never used. Essentially the arguments are ignored.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String*&lt;/code&gt; means a sequence of zero or more String, it&amp;rsquo;s like a
bounded array, but has a abstract type of &lt;code&gt;Sequence&amp;lt;String&amp;gt;&lt;/code&gt;. See &lt;a href=&#34;TODO&#34;&gt;Types&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt; has no return type written, it is intuit from the block return type. See below.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt; must have one of the following types, and must exist and be named at global scope:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(String*) -&amp;gt; Unit&lt;/code&gt; - arguments are passed as required, always exits success (unless &lt;code&gt;abort()&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(String*) -&amp;gt; Int&lt;/code&gt; - arguments are passed as required, always exits success (unless &lt;code&gt;abort()&lt;/code&gt; in whic case exits failure with error message).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;() -&amp;gt; Unit&lt;/code&gt; - similar to above.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;() -&amp;gt; Int&lt;/code&gt; - similar to above.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;notes-for-line-3:656c0d85793f7695097199a3e4d2b870&#34;&gt;Notes for line &lt;strong&gt;3&lt;/strong&gt;:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The body is a block (&lt;code&gt;BlockNode&lt;/code&gt;) which contains &lt;code&gt;ExpressionNode*&lt;/code&gt; (in this case one expression).&lt;/li&gt;
&lt;li&gt;Blocks always contain expressions. The type and value of the block is that of whatever is returned.

&lt;ul&gt;
&lt;li&gt;In this case &lt;code&gt;printf()&lt;/code&gt; always returns the unit/identity/void value (of type &lt;code&gt;Unit&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Thus the block only does something by side-effect.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;example-2-hello-world-script:656c0d85793f7695097199a3e4d2b870&#34;&gt;Example 2: Hello World Script&lt;/h2&gt;

&lt;p&gt;A more correct and portable (to Linux, MacOS, Windows Cygwin) script should be in an executable file of any name.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#!/usr/bin/env hs&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Hello World!&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The key addition is the POSIX magic &lt;code&gt;#!/usr/bin/env hs&lt;/code&gt; which runs the
script text through the &lt;code&gt;hs&lt;/code&gt; (aka. &lt;code&gt;harth-script&lt;/code&gt;) JIT script compiler
and execution engine found on &lt;code&gt;$PATH&lt;/code&gt;. The &lt;code&gt;#!&lt;/code&gt; is always treated as a
comment by &lt;a href=&#34;http://www.harth-lang.org/&#34;&gt;Harth&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;harth-console-panel&#34;&gt;
  &lt;pre class=&#34;harth-console&#34;&gt;
bash$ ls -l /usr/local/bin $HOME/bin
-rwxr-xr-x  1 harveyt  staff  1184 Nov 26 11:04 /usr/local/bin/harth
lrwxr-xr-x  1 harveyt  staff  1184 Nov 26 11:04 /usr/local/bin/harth-script -&amp;gt; /usr/local/bin/harth
lrwxr-xr-x  1 harveyt  staff  1184 Nov 26 11:04 /usr/local/bin/hs -&amp;gt; /usr/local/bin/harth
-rwxr-xr-x  1 harveyt  staff  1184 Nov 26 11:04 /Users/harveyt/bin/HelloWorld
bash$ HelloWorld
Hello World!
bash$
&lt;/pre&gt;
&lt;/div&gt;


&lt;div class=&#34;panel panel-danger&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        TODO
      
    &lt;/h3&gt;
  &lt;/div&gt;
  
    &lt;div class=&#34;panel-body&#34;&gt;
      How to support Windows scripts portably?
    &lt;/div&gt;
  
&lt;/div&gt;


&lt;h2 id=&#34;example-3-hello-world-in-repl:656c0d85793f7695097199a3e4d2b870&#34;&gt;Example 3: Hello World In REPL&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Hello World!&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At an interactive &lt;a href=&#34;http://www.harth-lang.org/&#34;&gt;Harth&lt;/a&gt; shell (or REPL), one can simply execute any statement, expression or program. So the above will result in:&lt;/p&gt;

&lt;div class=&#34;harth-console-panel&#34;&gt;
  &lt;pre class=&#34;harth-console&#34;&gt;
Harth&amp;gt; printf(&amp;#34;Hello World!\n&amp;#34;)
Hello World!\n
Harth&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;


&lt;h3 id=&#34;example-4-the-harth-lang-collection-sequence-class:656c0d85793f7695097199a3e4d2b870&#34;&gt;Example 4: The /Harth/Lang/Collection/Sequence class&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;harth&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Harth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collection&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Harth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Core&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * A Sequence is an abstract finite stream of elements which can be counted, accessed by index.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * &lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * New sequences can be created using Builder, Append(), Prepend() and similar functions.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * &lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * Operations performance may vary from O(1) to O(n) or more. LinearSequence and IndexedSequence&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * provide tighter bounds on performance order.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * &lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * Typically most classes should internally use concrete types such as List&amp;lt;T&amp;gt; or Array&amp;lt;T&amp;gt;, but&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * should return or accept Sequence&amp;lt;T&amp;gt; from methods for maximum usefulness.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;ReverseIterator&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Builder&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Size&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Int32&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covariant&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covariant&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Rest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;%&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covariant&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MakeEmpty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covariant&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covariant&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AppendAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;items&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covariant&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Prepend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covariant&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PrependAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;items&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covariant&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covariant&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Drop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;%&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some things to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Most non-builtin keywords are attributes of the form &lt;code&gt;@name&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;class&lt;/code&gt; can be generic in any number of types, with covariance and contravariance.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;class&lt;/code&gt; can extend any one other &lt;code&gt;class&lt;/code&gt; (and/or zero or more &lt;code&gt;types&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;@abstract&lt;/code&gt; attribute means this class only provides an interface (might turn info a type?)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;T%&lt;/code&gt; type means essentially &amp;ldquo;returns either the generic parameter type &lt;code&gt;T&lt;/code&gt; or an &lt;code&gt;Error&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Doxygen tags and comments are supported in some form.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Non-obvious:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lack of semi-colons.

&lt;ul&gt;
&lt;li&gt;I think Rust or Julia or some other modern language gets this
pretty close to correct, the semi-colon is essentially only needed
to seperate expressions in a &lt;code&gt;{ a; b; }&lt;/code&gt; style block.&lt;/li&gt;
&lt;li&gt;A newline outside of any expression, but in a block is
semantically taken to mean virtual &amp;ldquo;semicolon&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Blocks allow leading/trailing/multiple newlines (and thus
semicolons) inside, they&amp;rsquo;re the equivalent of &amp;ldquo;an expression that
doesn&amp;rsquo;t actually exist&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hey, where&amp;rsquo;s the body?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;example-4-the-harth-lang-collection-basesequence-class:656c0d85793f7695097199a3e4d2b870&#34;&gt;Example 4: The /Harth/Lang/Collection/BaseSequence class&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;harth&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Harth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collection&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Harth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Core&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * BaseSequence provides basic implementation of Sequence using some concrete SeqT type.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * Sub-classes are LinearSequence and IndexedSequence which provide different performance&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * properties for methods; for example Get() and Size() are O(n) and O(1) respectively.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * &lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * Sub-classes must at minimum must provide:&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * - Iterator or ReverseIterator (the opposite has a default implementation)&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * - Builder&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * &lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * Default implementations are provided for all other operations, though these may have terrible&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * performance up to O(n^2). Sub-classes should really override with better performance&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * implementations were possible.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;BaseSequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SeqT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;override&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Iterator&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReverseIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;override&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;ReverseIterator&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Iterator&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;override&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Size&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Int32&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/* ... */&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Note property and method overrides.&lt;/li&gt;
&lt;li&gt;Note crazy generics: means derived classes can control return type.

&lt;ul&gt;
&lt;li&gt;Probably will change as type system improves?&lt;/li&gt;
&lt;li&gt;Possibly more type inference too?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Syntax and semantics should always remain:

&lt;ul&gt;
&lt;li&gt;Flexible&lt;/li&gt;
&lt;li&gt;Concise&lt;/li&gt;
&lt;li&gt;Unabiguous.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Fortunately any decent editor running the full lexical to semantic
analysis would be able to display lexical, semantic feed back, possibly on-the
fly (highlighting) and provide errors and documentation as required.

&lt;ul&gt;
&lt;li&gt;See &lt;a href=&#34;http://www.flycheck.org&#34;&gt;Emacs FlyCheck&lt;/a&gt; for an example of this working in other languages pretty well.&lt;/li&gt;
&lt;li&gt;Emacs basically requires a very good text to reflection system
underneath the hood. Languages such as Python and C# tend to
provide this these days. Therefore &lt;a href=&#34;http://www.harth-lang.org/&#34;&gt;Harth&lt;/a&gt; must and will, builtin, free, easy.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;panel panel-info&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        Info
      
    &lt;/h3&gt;
  &lt;/div&gt;
  
    &lt;div class=&#34;panel-body&#34;&gt;
      The TODO notes and some semi-colons have been removed from the source. Hey it&amp;#39;s a prototype. Whatevers.
    &lt;/div&gt;
  
&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;warning:656c0d85793f7695097199a3e4d2b870&#34;&gt;Warning&lt;/h1&gt;

&lt;p&gt;&lt;div class=&#34;panel panel-warning&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        Warning
      
    &lt;/h3&gt;
  &lt;/div&gt;
  
    &lt;div class=&#34;panel-body&#34;&gt;
      All the syntax and semantics discussed here are simplified, reality is likely to be more complex, different and changing.
    &lt;/div&gt;
  
&lt;/div&gt;
&lt;/p&gt;

&lt;!-- Local Variables: --&gt;

&lt;!-- indent-tabs-mode: nil --&gt;

&lt;!-- End: --&gt;
</description>
    </item>
    
    <item>
      <title>Harth Programming Language</title>
      <link>http://www.harth-lang.org/</link>
      <pubDate>Mon, 29 Feb 2016 19:00:00 -0800</pubDate>
      
      <guid>http://www.harth-lang.org/</guid>
      <description>

&lt;h1 id=&#34;the-harth-programming-language:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;The Harth Programming Language&lt;/h1&gt;


&lt;p&gt;Last Update: February 29, 2016&lt;/p&gt;


&lt;h2 id=&#34;why-the-name-harth:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Why The Name &amp;ldquo;Harth&amp;rdquo;?&lt;/h2&gt;

&lt;p&gt;Harth is a contraction of &lt;strong&gt;Har&lt;/strong&gt;vey &lt;strong&gt;Th&lt;/strong&gt;ompson. That way people can
be sure who the original author was.&lt;/p&gt;

&lt;p&gt;The name also evokes the idea of a &amp;ldquo;Hearth&amp;rdquo;, a warm and cosy often
industrial sized fire-place in the home or blacksmith&amp;rsquo;s; here food is
cooked or new tools are forged.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.harth-lang.org/img/hearth-blacksmith.jpg&#34; alt=&#34;Hearth&#34; style=&#34;width: 400px;&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;yet-another-programming-language:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Yet Another Programming Language?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The nice thing about standards is that there are so many of them to choose from.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Andrew S. Tanenbaum&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve used many programming languages in my 30 years of
programming. Each of ttem have some good and not-so good parts. I&amp;rsquo;ve
often wondered what would happen if you took all the reasonable bits
of each and made a programming language from that. &lt;a href=&#34;http://www.harth-lang.org/&#34;&gt;Harth&lt;/a&gt; is that
experiment.&lt;/p&gt;

&lt;p&gt;Hopefully &lt;a href=&#34;http://www.harth-lang.org/&#34;&gt;Harth&lt;/a&gt; will not turn into a Jack-of-all-Trades (and master
of none), nor a confusing Swiss-Army-Knife programming language (the
sort you use if you can&amp;rsquo;t find your professional toolbox).&lt;/p&gt;

&lt;h2 id=&#34;programming-languages-i-borrowed-ideas-from:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Programming Languages I Borrowed Ideas From&lt;/h2&gt;

&lt;p&gt;In building &lt;a href=&#34;http://www.harth-lang.org/&#34;&gt;Harth&lt;/a&gt; I&amp;rsquo;m borrowing some of the &amp;ldquo;good&amp;rdquo; ideas from
various existing programming languages. Each of them are well worth
learning and using in their own right. I&amp;rsquo;m also very aware and am
grateful for the massive amount of work put in by all the clever
people behind each of these programming languages.&lt;/p&gt;

&lt;p&gt;Programming languages I&amp;rsquo;ve actually used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/C_(programming_language)&#34;&gt;C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/The_C%2B%2B_Programming_Language&#34;&gt;C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/C_Sharp_(programming_language)&#34;&gt;C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Java_(programming_language)&#34;&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Lisp_(programming_language)&#34;&gt;Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.python.org/&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Programming languages I&amp;rsquo;ve not really used, but have read about
interesting ideas worth borrowing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ceylon-lang.org/&#34;&gt;Ceylon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.erlang.org/&#34;&gt;Erlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.julialang.org/&#34;&gt;Julia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kotlinlang.org/&#34;&gt;Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruby-lang.org/&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/swift/&#34;&gt;Swift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;find-out-more:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Find Out More&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Read the rest of this page.&lt;/li&gt;
&lt;li&gt;Read the &lt;a href=&#34;http://www.harth-lang.org/post/&#34;&gt;Blog&lt;/a&gt; posts.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;panel panel-danger&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        TODO
      
    &lt;/h3&gt;
  &lt;/div&gt;
  
    &lt;div class=&#34;panel-body&#34;&gt;
      Implement these later as auto-builds from markdown docs and Doxygen code from source.
    &lt;/div&gt;
  
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Read the [Language Reference] - uses Markdown/Hugo.&lt;/li&gt;
&lt;li&gt;Read The [Language API] - uses Doxygen.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;project-background-september-14-2015:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Project Background (September 14 2015)&lt;/h1&gt;

&lt;p&gt;The high level vision for the project is to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Help software engineers make great tools for themselves and other software engineers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Software Engineers (programmers) use many tools, the most important of
which is essentially a high tech type-writer; the code editor. This is
something like Word (or Notepad), and they write text (code) which is
saved in text files. There are many other tools which provide some
additional functions that help programmers. These features may already
exist in in the code editor, or may find found in a separate tool.&lt;/p&gt;

&lt;h2 id=&#34;other-programmer-tools:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Other Programmer Tools&lt;/h2&gt;

&lt;p&gt;Some of the tools or features a programmer needs are;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Syntax Highlighting - The text is styled and coloured to highlight
important information: much like headings in documents.&lt;/li&gt;
&lt;li&gt;Find Definition - The programmer can look up definitions of
particular piece of code, much like a dictionary or thesaurus.&lt;/li&gt;
&lt;li&gt;Find References - The programmer can find all the references to a
particular piece of code, much like an index or table of contents.&lt;/li&gt;
&lt;li&gt;Search/Replace &amp;amp; Refactoring - The programmer can ask the computer
to make specific global changes to the code. For example:

&lt;ul&gt;
&lt;li&gt;Changing the name of something everywhere.&lt;/li&gt;
&lt;li&gt;Moving some code to somewhere else.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Auto Complete - The programmer can type short cuts and expand them,
like auto-complete on phones.&lt;/li&gt;
&lt;li&gt;Error Highlighting - The programmer can see errors in their code
almost immediately, like the red squiggly lines in Word that show
spelling mistakes.&lt;/li&gt;
&lt;li&gt;Compilation - The programmer can compile the program into code, and
at this point will be told about more problems in what they have
written (like a human editor would for a book or news story).&lt;/li&gt;
&lt;li&gt;Debugger - The programmer can run their program step by step and see
what’s going on (debugging); often this is needed because the
programmer has made a logical mistake that the computer cannot
possibly detect.&lt;/li&gt;
&lt;li&gt;Interactive Session - The programmer can type additional pieces of
code and perhaps modify the code while it’s running, to help correct
problems (bugs) in their code.&lt;/li&gt;
&lt;li&gt;Unit Tests - The programmer can write extra “test” code that checks
what they have written; this can be run automatically to catch
problems which are introduced as they change their program.&lt;/li&gt;
&lt;li&gt;Quality Tests - The programmer can use some automated code to
evaluate code quality, for example;

&lt;ul&gt;
&lt;li&gt;How much of the code has tests.&lt;/li&gt;
&lt;li&gt;How much of the code is documented for programmers.&lt;/li&gt;
&lt;li&gt;How complex the code is.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Issue Tracking - The programmer can create “To-Do” lists of things
they need to do later; building software is like growing a city -
you start with a one house, but very quickly there’s 1001 buildings,
each with 1001 different problems to solve.&lt;/li&gt;
&lt;li&gt;Change Management - The programmer can save versions of code, both
locally and on the web, and use this this to collaborate with others.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;woah-too-much:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Woah, Too Much!&lt;/h2&gt;

&lt;p&gt;There is an almost endless list of tools a programmer might
need. Consider Home Depot and how many hammers, drills, spanners,
screwdrivers, rulers, saws might be needed to build and maintain a
house. Likewise there are 1001 tools a programmer might need to use to
build good software. Not all the tools exist in one place, and not all
the tools are as good as they could be, or easily available, or cheap.&lt;/p&gt;

&lt;p&gt;My aim is not to provide all 1001 tools. That task is far too big for
one person to achieve.&lt;/p&gt;

&lt;p&gt;But we have to start somewhere.&lt;/p&gt;

&lt;h2 id=&#34;long-term-aims:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Long Term Aims&lt;/h2&gt;

&lt;p&gt;So a more realistic aim for this project is to:&lt;/p&gt;

&lt;p&gt;Provide a great foundation for many programmers to write and share
good tools a little easier, as and when they need them.&lt;/p&gt;

&lt;p&gt;Currently there has been an explosion in software developers creating
new programming languages out of the desire to solve the cohesive lack
of good tools. “Yet Another Programming Language” is announced, but
most software developers groan at each solution, but can’t quite
understand why. A few have discovered that we’re often repeating the
same patterns and even mistakes. We have to try to think a little
differently, dig for the hidden gems of ideas that a few smart people
have discovered, some of these could make a big difference.&lt;/p&gt;

&lt;h2 id=&#34;medium-term-aims:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Medium Term Aims&lt;/h2&gt;

&lt;p&gt;So the more focused aim of this project is to:&lt;/p&gt;

&lt;p&gt;Try to collect the most modern and alternative ideas in one place, to
try something a little different.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What if we didn’t write code as text saved to a text file?&lt;/li&gt;
&lt;li&gt;What if code was stored in a database like system?&lt;/li&gt;
&lt;li&gt;What if code was more like the internet, a data rich, textual,
graphical mixture?&lt;/li&gt;
&lt;li&gt;What if the programming ecosystem itself fully understood itself?&lt;/li&gt;
&lt;li&gt;This idea has been around since the 1960’s, but most languages only
go so far; providing access to understanding only the high level
constructs.&lt;/li&gt;
&lt;li&gt;Provide full 100% understanding of all code as a library (Microsoft
are doing this with something called Roysln, which is part of their
next Visual Studio 2015 release).&lt;/li&gt;
&lt;li&gt;Provide full 100% ability to convert text to executable code, and
debug as a library (Apple use something called LLVM which does this
at a lower level as part of their XCode development system).&lt;/li&gt;
&lt;li&gt;What if the programming ecosystem ditched manual processes that just
make the human’s life harder and more miserable?&lt;/li&gt;
&lt;li&gt;What if the programming ecosystem automated more processes so that
the human can concentrate on the creative side more?&lt;/li&gt;
&lt;li&gt;What if the programming ecosystem helped the human as much as possible to read and write good code in the first place?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Still this is a quite a lot of work, so we need a more realistic shorter term aims for this project.&lt;/p&gt;

&lt;h2 id=&#34;goals-for-2015:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Goals For 2015&lt;/h2&gt;

&lt;p&gt;The goal for the end of year 2015 is to:&lt;/p&gt;

&lt;p&gt;Build a new prototype programming environment based on more new and
modern ideas learned from experience and academia.&lt;/p&gt;

&lt;p&gt;These include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Familiar programming language - a programming language that will be
fimiliar to most people; built on top of C++, but with ideas taken
from Java, C#, Swift, Erlang, Scala, Lisp, Smalltalk, &amp;hellip;&lt;/li&gt;
&lt;li&gt;Static type system - the programmer must be clear and explicit about
what the program is doing.&lt;/li&gt;
&lt;li&gt;Use the static type system to solve more problems:

&lt;ul&gt;
&lt;li&gt;No null pointer exceptions - “The Billion Dollar Mistake” has
plagued us for too long, and most more modern languages are
solving this quite neatly.&lt;/li&gt;
&lt;li&gt;Non-exceptional run-time error handling - the programmer must
explicitly and consciously handle the problems user’s might face
as close to the source as possible.&lt;/li&gt;
&lt;li&gt;Exceptions were initially thought of as a good solution, but have proven to be a “bad” idea, though many people havn’t realized or agree on this yet.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Garbage collection - the programmer is absolved from worrying about
memory management, computers are much better at doing this labor
intensive task without error. This is contentious with some
programmers; the answer to that is you shouldn’t do this for low
level programming, but we’re not dealing in this area, so it’s good
and right to do so.&lt;/li&gt;
&lt;li&gt;Concurrency - modern computers have multiple processors, to use
these effectively the programmer needs an easy way to use the CPUs
effectively.&lt;/li&gt;
&lt;li&gt;Use task/actor systems that share only immutable data, no locking
and no mutation means the programmer can more easily understand how
to do this well and without bugs.&lt;/li&gt;
&lt;li&gt;Self awareness - The programming language provides a library to
understand itself fully:

&lt;ul&gt;
&lt;li&gt;Convert text to an in-memory editable data structure.&lt;/li&gt;
&lt;li&gt;Convert this in-memory structure back to text.&lt;/li&gt;
&lt;li&gt;Analyze these data structures for full meaning, cross referencing,
and compile time (programmer) errors.&lt;/li&gt;
&lt;li&gt;Provide layers on top for editors, scripting, compilation,
debugging and interactive features that are commonly needed.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Prototype - showing some of the basic required features listed in
Background earlier, showing how easy such tools are to build given
the foundation:

&lt;ul&gt;
&lt;li&gt;Find Definition&lt;/li&gt;
&lt;li&gt;Find Reference&lt;/li&gt;
&lt;li&gt;Auto Complete&lt;/li&gt;
&lt;li&gt;Error Highlighting&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Prototype stretch - show some cool and mandatory but important
features to prove it really can work:

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Google Maps” Code View - this is an “exciter” in that I’ve not
seen it done in many products, only hinted at in research.&lt;/li&gt;
&lt;li&gt;Exporter&lt;/li&gt;
&lt;li&gt;Compilation&lt;/li&gt;
&lt;li&gt;Interactive Session&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;status:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Status&lt;/h1&gt;

&lt;h1 id=&#34;on-september-14-2015:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;On September 14, 2015&lt;/h1&gt;

&lt;p&gt;Rough completion for this years goal (not for a full final
implementation) from the above list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Familiar programming language - done&lt;/li&gt;
&lt;li&gt;Static type system - done&lt;/li&gt;
&lt;li&gt;No null pointer exceptions - done&lt;/li&gt;
&lt;li&gt;Non-exception run-time error handling - done&lt;/li&gt;
&lt;li&gt;Garbage collection - 80%&lt;/li&gt;
&lt;li&gt;Concurrency - Deferred; this problem is complex to implement, not
required to progress, and has already been proven to work very well
on other projects.&lt;/li&gt;
&lt;li&gt;Self-awareness - 50%&lt;/li&gt;
&lt;li&gt;Prototype - 0%&lt;/li&gt;
&lt;li&gt;Prototype stretch - 0%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some stats, which if you’re aware of programmer productivity is very
high. However I’ve been careful to work only about 8 hours for 6 days
of the week to avoid burn out.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lines of code written to date (from Jan 1st): 145,000&lt;/li&gt;
&lt;li&gt;Average daily line count: 650&lt;/li&gt;
&lt;li&gt;Number of code files: 25300&lt;/li&gt;
&lt;li&gt;Total committed changes: 2670&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;on-october-27-2015:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;On October 27, 2015&lt;/h1&gt;

&lt;p&gt;I’ve completed the Prototype goals already two months ahead of
schedule! :-D&lt;/p&gt;

&lt;div class=&#34;panel panel-info&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        Info
      
    &lt;/h3&gt;
  &lt;/div&gt;
  
    &lt;div class=&#34;panel-body&#34;&gt;
      Though not the stretch ones though, they were optional; they’ll eventually get done when it makes sense.
    &lt;/div&gt;
  
&lt;/div&gt;


&lt;p&gt;The plan was to finish the prototype in November and December, but
though it’s taken nine months to program the “brains” of the project,
once that was done it took only two weeks to implement the prototype
features as extensions for an existing editor (Emacs).&lt;/p&gt;

&lt;h1 id=&#34;on-feb-29-2016:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;On Feb 29, 2016&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.harth-lang.org/&#34;&gt;Harth&lt;/a&gt; website goes live.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initially just the home page.

&lt;ul&gt;
&lt;li&gt;Static web site built with &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Uses &lt;a href=&#34;https://github.com/harthsw/harth-hugo-theme&#34;&gt;Harth-Hugo-Theme&lt;/a&gt;, &lt;a href=&#34;http://getbootstrap.com&#34;&gt;Bootstrap&lt;/a&gt;, &lt;a href=&#34;http://pygments.org&#34;&gt;Pygments&lt;/a&gt; and some other CSS/Javascript.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Eventually will host Harth blog.

&lt;ul&gt;
&lt;li&gt;Organized by date.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Eventually will host Harth Technical Reference and API documentation.

&lt;ul&gt;
&lt;li&gt;Organized by language and version.&lt;/li&gt;
&lt;li&gt;Automatically built from Harth code itself.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;financing-and-business-plan:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Financing and Business Plan&lt;/h1&gt;

&lt;p&gt;This project is &lt;strong&gt;NOT&lt;/strong&gt; a business. Essentially I&amp;rsquo;m on sabbatical from
work and doing research and development using some savings.&lt;/p&gt;

&lt;p&gt;This project is entirely self funded. I&amp;rsquo;ll run out of money sometime in &lt;sup&gt;2016&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2017&lt;/sub&gt;.&lt;/p&gt;

&lt;p&gt;I have some ideas on a business plan; for now I only need money to live and eat.&lt;/p&gt;

&lt;p&gt;The short term plan:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set up a simple business.&lt;/li&gt;
&lt;li&gt;Get some financing probably &lt;a href=&#34;https://www.kickstarter.com&#34;&gt;Kickstarter&lt;/a&gt; or &lt;a href=&#34;https://www.patreon.com&#34;&gt;Patreon&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The long term plan (subject to changing my mind on a whime) is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The product will should hopefully &amp;ldquo;almost&amp;rdquo; free, as in peanuts.

&lt;ul&gt;
&lt;li&gt;Probably a yearly subscription.&lt;/li&gt;
&lt;li&gt;Think &lt;a href=&#34;https://www.atlassian.com/purchase/product/jira-software&#34;&gt;Atlassian Jira&lt;/a&gt; &amp;ldquo;free&amp;rdquo; model.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;It will remain under my control (which means you can give me lots of
cash, I just get to keep 51%).&lt;/li&gt;
&lt;li&gt;I reserve the right to sell it to whoever I like for one
trillion-billion whatevers. I&amp;rsquo;m not greedy however and thus:

&lt;ul&gt;
&lt;li&gt;Head towards inverse tithing (I keep 10%, give away 90% to worthy causes/endeavours).&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;d probably only buy a reasonable house and car.&lt;/li&gt;
&lt;li&gt;Do lots of cool things for education, software and charity.&lt;/li&gt;
&lt;li&gt;I may occasionally splash out on a nice holiday or a first class plane ticket.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m well aware that the likelihood of this leading to success is minimal.

&lt;ul&gt;
&lt;li&gt;Failing this, I&amp;rsquo;ll go get a normal job making software controlled widgets for space drones.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;source-and-binrary-products:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Source and Binrary Products&lt;/h1&gt;

&lt;p&gt;Currently the prototype(s) are closed source, the code and built
products are internal prototypes for research and development.&lt;/p&gt;

&lt;p&gt;The projection for first usable alpha is roughly somewhere within 2016
to 2017 (plus or minus as many years as required). Translation: I have
no idea really, other than that&amp;rsquo;s a huge undertaking.&lt;/p&gt;

&lt;p&gt;Obviously if a few people help out (especially full time), this might
be reduced very slightly.&lt;/p&gt;

&lt;h2 id=&#34;what-does-the-prototype-v0-2-demonstrate:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;What Does The Prototype (V0.2) Demonstrate?&lt;/h2&gt;

&lt;p&gt;This has essentially demonstrated one of the ideas; by providing the
“brains” as components, programmers can write better tools.&lt;/p&gt;

&lt;p&gt;I can demonstrate editing a very simple program with the following
features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Syntax error checking as you type;

&lt;ul&gt;
&lt;li&gt;Editor puts red squiggly lines on erroneous text, with explanations of errors on popups.&lt;/li&gt;
&lt;li&gt;(For prototype only updates on save).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Find definition;

&lt;ul&gt;
&lt;li&gt;editor jumps to definition of type.&lt;/li&gt;
&lt;li&gt;(For prototype, works only on types).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Find references;

&lt;ul&gt;
&lt;li&gt;editor can cycle through all references to type.&lt;/li&gt;
&lt;li&gt;(For prototype, works only on types).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Auto-complete names;

&lt;ul&gt;
&lt;li&gt;editor either completes unique name or gives pop-up list of possible completions to select.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that the features adapt to changes in the program as you edit
it - the “brains” re-analyses the whole program as it’s been written.&lt;/p&gt;

&lt;h2 id=&#34;technical-details-v0-2:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Technical Details (V0.2)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create a standalone “server” process which reads, parses and
analyses a whole project from disk.&lt;/li&gt;
&lt;li&gt;By connecting over TCP and sending commands, the “server” responds
to requests for information about the project.&lt;/li&gt;
&lt;li&gt;The “server” can update (reload at the moment, eventually
incremental updates) the analysis of the whole project files.&lt;/li&gt;
&lt;li&gt;Extended Emacs (a standard well known programmable editor) to talk
to this server process.&lt;/li&gt;
&lt;li&gt;Extended and adapted existing Emacs packages (flycheck, ggtags,
company) which provide the front-end/UI/Emacs for virtually “free”.
(No point reinventing the wheel here).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not everyone uses Emacs as a program editor, but it would be fairly
easy to write plugins for other editors; most of the work is done in
the server process (for example: you can simply use telnet or netcat
to talk to the server, it’s just a TCP text service like a web
server). The “server” should really also provide information to
format/colour/indent code - and/or possibly provide standard editor
component.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Test Blog Page</title>
      <link>http://www.harth-lang.org/blog/2016/02/24/test-blog-page/</link>
      <pubDate>Wed, 24 Feb 2016 11:38:50 -0800</pubDate>
      
      <guid>http://www.harth-lang.org/blog/2016/02/24/test-blog-page/</guid>
      <description>

&lt;h1 id=&#34;reason:f7973322a3a603033225704c216a4c0b&#34;&gt;Reason&lt;/h1&gt;

&lt;p&gt;This blog is a test page. It&amp;rsquo;s meant to test the &lt;a href=&#34;https://github.com/harthsw/harth-hugo-theme&#34;&gt;Harth-Hugo-Theme&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;code-shortcode:f7973322a3a603033225704c216a4c0b&#34;&gt;Code Shortcode&lt;/h2&gt;

&lt;p&gt;Example code block:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define IABS(x) ((x) &amp;lt; 0 ? -(x) : (x))&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;cm&#34;&gt;/* An annoying &amp;quot;Hello World&amp;quot; example */&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xFFFF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;unordered_map&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\\\&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// this is an error&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2e3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Thing&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Thing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;CallFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Thing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CallFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	    &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;oops&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Error: %s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;code-shortcode-2:f7973322a3a603033225704c216a4c0b&#34;&gt;Code Shortcode 2&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;thing&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;That&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;XXX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Int&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;%s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;inline-code:f7973322a3a603033225704c216a4c0b&#34;&gt;Inline Code&lt;/h2&gt;

&lt;p&gt;Calling the function &lt;code&gt;CallFunc()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;inline-key-press:f7973322a3a603033225704c216a4c0b&#34;&gt;Inline Key Press&lt;/h2&gt;

&lt;p&gt;Press the following keys to quit: 
  
  
    &lt;span class=&#34;harth-key&#34;&gt;&amp;#8984&lt;/span&gt;
  
    

  
  +
  
  
    &lt;span class=&#34;harth-key&#34;&gt;Q&lt;/span&gt;
  
    

&lt;/p&gt;

&lt;h2 id=&#34;sample-console-output:f7973322a3a603033225704c216a4c0b&#34;&gt;Sample Console Output&lt;/h2&gt;

&lt;div class=&#34;harth-console-panel&#34;&gt;
  &lt;pre class=&#34;harth-console&#34;&gt;
Sample console output
Stuff
********************************************************************************
End
&lt;/pre&gt;
&lt;/div&gt;


&lt;h2 id=&#34;various-panels:f7973322a3a603033225704c216a4c0b&#34;&gt;Various Panels&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Success &lt;div class=&#34;panel panel-success&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        It worked!
      
    &lt;/h3&gt;
  &lt;/div&gt;
  
    
      &lt;div class=&#34;panel-body&#34;&gt;
	Which is nice.
      &lt;/div&gt;
    
  
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Info &lt;div class=&#34;panel panel-info&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        Info
      
    &lt;/h3&gt;
  &lt;/div&gt;
  
    &lt;div class=&#34;panel-body&#34;&gt;
      Remember to add this.
    &lt;/div&gt;
  
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Warning &lt;div class=&#34;panel panel-warning&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        Warning
      
    &lt;/h3&gt;
  &lt;/div&gt;
  
    &lt;div class=&#34;panel-body&#34;&gt;
      Do not do this.
    &lt;/div&gt;
  
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Error - &lt;div class=&#34;panel panel-danger&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        Error
      
    &lt;/h3&gt;
  &lt;/div&gt;
  
    &lt;div class=&#34;panel-body&#34;&gt;
      Oh dear
    &lt;/div&gt;
  
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;todo:f7973322a3a603033225704c216a4c0b&#34;&gt;TODO&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;TODO &lt;div class=&#34;panel panel-danger&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        TODO
      
    &lt;/h3&gt;
  &lt;/div&gt;
  
    &lt;div class=&#34;panel-body&#34;&gt;
      Remember to add a thing.
    &lt;/div&gt;
  
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;todo-list:f7973322a3a603033225704c216a4c0b&#34;&gt;TODO List&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;panel panel-danger&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        TODO
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class=&#34;panel-body&#34;&gt;
    &lt;ul&gt;
&lt;li&gt;Thing&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>License</title>
      <link>http://www.harth-lang.org/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.harth-lang.org/license/</guid>
      <description>

&lt;h3 id=&#34;content-license:53e892b8b41cc4caece1cfd5ef21d6e7&#34;&gt;Content license&lt;/h3&gt;

&lt;p&gt;All non-code blog content is licensed under &lt;a href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons BY-NC-SA&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;code-license:53e892b8b41cc4caece1cfd5ef21d6e7&#34;&gt;Code license&lt;/h3&gt;

&lt;p&gt;All source code files and snippets found on this blog, unless otherwise explicitly noted, are licensed under the terms below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Copyright 2016 Harvey Thompson&lt;/p&gt;

&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &amp;ldquo;License&amp;rdquo;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &amp;ldquo;AS IS&amp;rdquo; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>
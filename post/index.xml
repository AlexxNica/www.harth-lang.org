<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Harth Programming Language</title>
    <link>http://www.harth-lang.org/post/</link>
    <description>Recent content in Posts on Harth Programming Language</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Mar 2016 11:57:19 -0800</lastBuildDate>
    <atom:link href="http://www.harth-lang.org/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Syntax Ideas and Prototype Examples</title>
      <link>http://www.harth-lang.org/blog/2016/03/01/syntax-ideas-and-prototype-examples/</link>
      <pubDate>Tue, 01 Mar 2016 11:57:19 -0800</pubDate>
      
      <guid>http://www.harth-lang.org/blog/2016/03/01/syntax-ideas-and-prototype-examples/</guid>
      <description>

&lt;h1 id=&#34;familiar-programming-language-with-fully-reified-immutable-and-homoiconic-code-data:656c0d85793f7695097199a3e4d2b870&#34;&gt;Familiar Programming Language with Fully Reified, Immutable, and Homoiconic code/data.&lt;/h1&gt;

&lt;h2 id=&#34;familiar:656c0d85793f7695097199a3e4d2b870&#34;&gt;Familiar&lt;/h2&gt;

&lt;p&gt;The syntax and text of a &lt;a href=&#34;http://www.harth-lang.org/&#34;&gt;Harth&lt;/a&gt; program should be familiar to most programmers.&lt;/p&gt;

&lt;h2 id=&#34;reified:656c0d85793f7695097199a3e4d2b870&#34;&gt;Reified&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Reification_(computer_science)&#34;&gt;Reified&lt;/a&gt; means that all levels of the programming language model (text,
  lexical/tokens, AST, Semantic Model, Project, Binaries) are processed and available at run-time
  as ordinary data.&lt;/p&gt;

&lt;p&gt;The data where possible immutable (or near enough).&lt;/p&gt;

&lt;h2 id=&#34;immutable:656c0d85793f7695097199a3e4d2b870&#34;&gt;Immutable&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Immutable_object&#34;&gt;Immutable&lt;/a&gt; data gives greater flexibility for shared state, caching, checksum, versioning, undo.&lt;/p&gt;

&lt;h2 id=&#34;homoiconic:656c0d85793f7695097199a3e4d2b870&#34;&gt;Homoiconic&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Homoiconicity&#34;&gt;Homoiconic&lt;/a&gt; means that the text, lexemes, tokens, AST, Semantic data,
Project and binaries have the same shared written syntax (in human
and/or binary) as any other language data and/or code.&lt;/p&gt;

&lt;p&gt;Thus the distinction between code, data, and functionality blurs.&lt;/p&gt;

&lt;h1 id=&#34;text-to-semantic-flow:656c0d85793f7695097199a3e4d2b870&#34;&gt;Text to Semantic Flow&lt;/h1&gt;

&lt;h2 id=&#34;input-output:656c0d85793f7695097199a3e4d2b870&#34;&gt;Input/Output&lt;/h2&gt;

&lt;p&gt;Text is read from any stream of characters and internally represented
by a &lt;code&gt;Char*&lt;/code&gt;, an abstract sequence of zero or more Unicode characters.&lt;/p&gt;

&lt;p&gt;Note that &lt;code&gt;Char&lt;/code&gt; and &lt;code&gt;Sequence&amp;lt;Lexeme&amp;gt;&lt;/code&gt; are immutable data structures.&lt;/p&gt;

&lt;h2 id=&#34;lexical-analysis:656c0d85793f7695097199a3e4d2b870&#34;&gt;Lexical Analysis&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Lexer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Lexeme&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Method takes some &lt;code&gt;text&lt;/code&gt; of type &lt;code&gt;Char*&lt;/code&gt;; a sequence of Unicode characters of any valid Unicode value.&lt;/p&gt;

&lt;p&gt;The method returns &lt;code&gt;Lexeme*&lt;/code&gt;; that is zero or more &lt;code&gt;Lexeme&lt;/code&gt; objects.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tabs and spaces are usually only significant in determining lexeme boundaries.&lt;/li&gt;
&lt;li&gt;C, C++ and shell script style comments:

&lt;ul&gt;
&lt;li&gt;C means &lt;code&gt;/* block */&lt;/code&gt; (allows proper nesting)&lt;/li&gt;
&lt;li&gt;C++ means &lt;code&gt;// line&lt;/code&gt; (for comment to end of line)&lt;/li&gt;
&lt;li&gt;Shell script means &lt;code&gt;#!&lt;/code&gt; is allowed (rest of line is special script comment).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Lexemes are any valid characters.

&lt;ul&gt;
&lt;li&gt;Escaping and UTF encodings as allowed by C, C++ and other languages:&lt;/li&gt;
&lt;li&gt;Example &lt;code&gt;\n&lt;/code&gt; means a literal newline, raw newlines in source are usually not significant.&lt;/li&gt;
&lt;li&gt;Example &lt;code&gt;\r&lt;/code&gt; means a literal carriage return, again these are ignored.&lt;/li&gt;
&lt;li&gt;Internally any &lt;code&gt;\n&lt;/code&gt; and/or &lt;code&gt;\r&lt;/code&gt; pair or single character sequence is counted as &amp;ldquo;end of line&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Lexemes are split into several categories:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BuiltinToken&lt;/code&gt;: Builtin to the language itself (eg. &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NameToken&lt;/code&gt;: Any other symbol formed of unrecognized alpha-numeric or symbol characters.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReaderToken&lt;/code&gt;: A special token reader, (eg. &lt;code&gt;&amp;quot;text&amp;quot;&lt;/code&gt; is implemented as a special reader function).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CommentTrivia&lt;/code&gt;: A comment span.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WhitespaceTrivia&lt;/code&gt;: Any other whitespace.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ErrorTrivia&lt;/code&gt;: Some synthetic error detected by the lexer (eg. EOF in unterminated string or comment).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Lexemes have known start, end, and character counts (in terms of Unicode characters).&lt;/li&gt;
&lt;li&gt;These start/end points can be mapped to source code file, line and columns.&lt;/li&gt;
&lt;li&gt;Note that &lt;code&gt;Lexeme&lt;/code&gt; and &lt;code&gt;Sequence&amp;lt;Lexeme&amp;gt;&lt;/code&gt; are immutable data structures.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;lexemes-to-parse-tree:656c0d85793f7695097199a3e4d2b870&#34;&gt;Lexemes to Parse Tree&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Lexeme*&lt;/code&gt; is further processed by a recursive descent parser (eventually hand written).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;lexemes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Lexeme&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NodeTree&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Method takes some &lt;code&gt;lexemes&lt;/code&gt; of type &lt;code&gt;Lexeme*&lt;/code&gt;; a sequence of zero or more &lt;code&gt;Lexeme&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The method returns a &lt;code&gt;NodeTree&lt;/code&gt; which represents any valid or invalid
AST tree of &lt;code&gt;Node&lt;/code&gt;, essentially a view of the AST tree as a
&lt;a href=&#34;https://www.safaribooksonline.com/library/view/language-implementation-patterns/9781680500097/f_0045.html&#34;&gt;Homogeneous AST&lt;/a&gt;. This view and the underlyig data in immutable.&lt;/p&gt;

&lt;p&gt;This means the source text, lexeme and AST syntax tree can be easily
versioned, editted, undo using functional style immutable data
structures (which are provided by &lt;a href=&#34;http://www.harth-lang.org/&#34;&gt;Harth&lt;/a&gt; in the standard library).&lt;/p&gt;

&lt;h2 id=&#34;semantic-analysis-of-parse-tree:656c0d85793f7695097199a3e4d2b870&#34;&gt;Semantic Analysis of Parse Tree&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Semantic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Analyze&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NodeTree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SemanticModel&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The tree input of type &lt;code&gt;NodeTree&lt;/code&gt; is converted into a static
&lt;code&gt;SemanticModel&lt;/code&gt; instance; from the outside perspective this is
immutable (it&amp;rsquo;s actually either &amp;ldquo;frozen&amp;rdquo; once completed and/or backed
by immutable data such as the &lt;code&gt;Lexeme*&lt;/code&gt; and &lt;code&gt;NodeTree&lt;/code&gt; instances).&lt;/p&gt;

&lt;p&gt;Semantic Analysis is useful fairly expensive, so caching these results
might be useful both for the user of the library and the provider
(which may share some cached/immutable data as is possible).&lt;/p&gt;

&lt;p&gt;Again this state can be serialized and deserialized in human or binary forms.&lt;/p&gt;

&lt;p&gt;Externally the &lt;code&gt;SemanticModel&lt;/code&gt; allows the programmer (and thus all
tools) to ask any semantic, syntactic, lexical, or textual question.&lt;/p&gt;

&lt;p&gt;Typically the analysis phase is responsible for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Checking the syntax tree is well formed.&lt;/li&gt;
&lt;li&gt;Checking there are no lexical or parsing errors.&lt;/li&gt;
&lt;li&gt;Determining resolution to name bindings from their definition(s) to any reference(s).&lt;/li&gt;
&lt;li&gt;Maintaining identity relationships between components (binaries, libraries).

&lt;ul&gt;
&lt;li&gt;Each component contains fully resolved (to dependent components).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Maintaining (cached) name binding maps from def-ref lookups.

&lt;ul&gt;
&lt;li&gt;Useful for completion, documentation, searching, index etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Caching the &lt;code&gt;SemanticModel&lt;/code&gt; with the equivalent previous levels allows
for almost instant restarts; the models are all checksummed/hashed for
fast comparison checks. Any tool would start by:&lt;/p&gt;

&lt;h2 id=&#34;startup-and-caching-model:656c0d85793f7695097199a3e4d2b870&#34;&gt;Startup and Caching Model&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Look at text model (collection of &lt;code&gt;Char*&lt;/code&gt; stored in files, memory, repositories etc).&lt;/li&gt;
&lt;li&gt;If this matches existing &lt;code&gt;Lexical&lt;/code&gt; and/or &lt;code&gt;NodeTree&lt;/code&gt; and/or &lt;code&gt;SemanticModel&lt;/code&gt; read these,
ensuring they all match each other exactly.&lt;/li&gt;
&lt;li&gt;If not matching, compute the updated versions and cache to disk as required.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This data is also immutable and can thus be safely shared between
machines, processes, and/or threads over any connection type.&lt;/p&gt;

&lt;p&gt;Essentially all tools wherever they are have the best chance of
instantly reading all source code at the highest fidelity - using the least
amount of work (at least this time). That is approaching &amp;ldquo;Read many, write once&amp;rdquo; levels.&lt;/p&gt;

&lt;h2 id=&#34;compiler-script-and-repl:656c0d85793f7695097199a3e4d2b870&#34;&gt;Compiler, Script and REPL&lt;/h2&gt;

&lt;p&gt;The backend of the Compiler essentially looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Anything&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;files&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SemanticModel&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SemanticModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Project&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;project&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Project&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Executable&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Executable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Anything&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A &lt;code&gt;Project&lt;/code&gt; is the fully reified and homoiconic representation of an
executable program; by default it contains an immutable representation
of all semantic information, code, binaries, libraries, debug
information etc.&lt;/p&gt;

&lt;p&gt;The method &lt;code&gt;Eval&lt;/code&gt; is a short cut for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lexer/Read to Parser/Read to Semantic/Analyze to Compiler/Compile to Compiler/Link to Compiler/Run.

&lt;ul&gt;
&lt;li&gt;That is text arbitary text and try to execute it Just-In-Time (JIT).&lt;/li&gt;
&lt;li&gt;Suitable for implementing a REPL and/or script.&lt;/li&gt;
&lt;li&gt;Additional shared state (variables, scope, etc) allowed in an &amp;ldquo;environment&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The method &lt;code&gt;Load&lt;/code&gt; allows for a number of files to be loaded into a &lt;code&gt;SemanticModel&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;files&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;files&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReadFiles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;trees&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lexer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SourceText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NodeTree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CreateProjectWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trees&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Semantic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Analyze&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The methods &lt;code&gt;Compile&lt;/code&gt;, &lt;code&gt;Link&lt;/code&gt; and &lt;code&gt;Run&lt;/code&gt; allow for finer control.&lt;/p&gt;

&lt;h3 id=&#34;compiler:656c0d85793f7695097199a3e4d2b870&#34;&gt;Compiler&lt;/h3&gt;

&lt;p&gt;A compiler might look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;project&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;executable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;executable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;abort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Anything&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Compilation success&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;script-interpreter:656c0d85793f7695097199a3e4d2b870&#34;&gt;Script Interpreter&lt;/h3&gt;

&lt;p&gt;A script interpreter might look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;project&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;executable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;executable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;abort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Anything&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;%O&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;script-interpreter-1:656c0d85793f7695097199a3e4d2b870&#34;&gt;Script Interpreter&lt;/h3&gt;

&lt;p&gt;A REPL interpreter might look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IO&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Stdin&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EOF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReadLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Harth&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Compiler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PrintStackTrace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Anything&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;%O&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;debugging:656c0d85793f7695097199a3e4d2b870&#34;&gt;Debugging?&lt;/h2&gt;

&lt;p&gt;The debugger essentially provides a few basic helpers on top of
semantic name and source text resolution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Debugger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;functionName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Location&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Debugger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;fileName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;column&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Location&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Debugger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;loc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Breakpoint&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;Breakpoint&lt;/code&gt; result can be modified for single shot, read/write, conditional etc.&lt;/p&gt;

&lt;p&gt;Additionally the JIT and/or compiler can live insert any compiled
expression (actually a parsed &lt;code&gt;NodeTree&lt;/code&gt;) into code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Debugger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LiveEdit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;loc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NodeTree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since all internal data can be converted to human string with
&lt;code&gt;ToString()&lt;/code&gt; and/or &lt;code&gt;printf&lt;/code&gt;, a watch point might be implemented by
&lt;code&gt;LiveEdit&lt;/code&gt; insertion of &lt;code&gt;printf()&lt;/code&gt; for each variable and/or state.&lt;/p&gt;

&lt;p&gt;Breakpoints are trivial therefore; they stop execution of all tasks under the current process except for the &lt;code&gt;Debugger/Task&lt;/code&gt; instance which continues running under process control so that all other tasks can be monitored.&lt;/p&gt;

&lt;p&gt;Implementations of some other fundamental functions such as
&lt;code&gt;Debugger/Continue()&lt;/code&gt;, &lt;code&gt;Run()&lt;/code&gt;, &lt;code&gt;Step()&lt;/code&gt; and &lt;code&gt;Next()&lt;/code&gt; can be
implemented using semantic information.&lt;/p&gt;

&lt;h2 id=&#34;backend-binary-generator:656c0d85793f7695097199a3e4d2b870&#34;&gt;Backend Binary Generator&lt;/h2&gt;

&lt;p&gt;The backend binary and object generator uses the latest &lt;a href=&#34;http://llvm.org&#34;&gt;LLVM&lt;/a&gt; to
convert a &lt;code&gt;SemanticModel&lt;/code&gt; into an internal set of linkage/executable
&lt;code&gt;LLVM/Module*&lt;/code&gt;. These are either cached and/or written to disk as
appropriate.&lt;/p&gt;

&lt;h1 id=&#34;programming-language-examples:656c0d85793f7695097199a3e4d2b870&#34;&gt;Programming Language Examples&lt;/h1&gt;

&lt;h2 id=&#34;example-1-hello-world:656c0d85793f7695097199a3e4d2b870&#34;&gt;Example 1: Hello World&lt;/h2&gt;

&lt;p&gt;The basic program (executable, script or REPL) is to print &amp;ldquo;Hello World&amp;rdquo;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;1 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;2 &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;3 &lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Hello World!&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt;4 &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code can be made into an executable, shell script or typed interactively at a REPL:&lt;/p&gt;

&lt;div class=&#34;harth-console-panel&#34;&gt;
  &lt;pre class=&#34;harth-console&#34;&gt;
bash$ ls -l /usr/local/bin .
-rwxr-xr-x  1 harveyt  staff  1184 Nov 26 11:04 /usr/local/bin/harth
lrwxr-xr-x  1 harveyt  staff  1184 Nov 26 11:04 /usr/local/bin/harth-compiler -&amp;gt; /usr/local/bin/harth
lrwxr-xr-x  1 harveyt  staff  1184 Nov 26 11:04 /usr/local/bin/hc -&amp;gt; /usr/local/bin/harth
-rw-r--r--  1 harveyt  staff  1184 Nov 26 11:04 HelloWorld.ha
bash$ hc HelloWorld
bash$ ls -l .
-rwxr-xr-x  1 harveyt  staff  1184 Nov 26 11:04 HelloWorld
bash$ ./HelloWorld
Hello World!\n
bash$
&lt;/pre&gt;
&lt;/div&gt;


&lt;h3 id=&#34;notes-for-line-1:656c0d85793f7695097199a3e4d2b870&#34;&gt;Notes for line &lt;strong&gt;1&lt;/strong&gt;:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;function&lt;/code&gt; denotes that a function name, type and body will appear.

&lt;ul&gt;
&lt;li&gt;There is no container, it&amp;rsquo;s global scope.&lt;/li&gt;
&lt;li&gt;This is suitable for binary, script and/or REPL.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;package&lt;/code&gt; and &lt;code&gt;import&lt;/code&gt; are the defaults.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt; takes only one argument, the &lt;code&gt;String&lt;/code&gt; passed to the executable and/or script.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&lt;/code&gt; means variable value is unamed and never used. Essentially the arguments are ignored.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String*&lt;/code&gt; means a sequence of zero or more String, it&amp;rsquo;s like a
bounded array, but has a abstract type of &lt;code&gt;Sequence&amp;lt;String&amp;gt;&lt;/code&gt;. See &lt;a href=&#34;TODO&#34;&gt;Types&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt; has no return type written, it is intuit from the block return type. See below.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt; must have one of the following types, and must exist and be named at global scope:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(String*) -&amp;gt; Unit&lt;/code&gt; - arguments are passed as required, always exits success (unless &lt;code&gt;abort()&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(String*) -&amp;gt; Int&lt;/code&gt; - arguments are passed as required, always exits success (unless &lt;code&gt;abort()&lt;/code&gt; in whic case exits failure with error message).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;() -&amp;gt; Unit&lt;/code&gt; - similar to above.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;() -&amp;gt; Int&lt;/code&gt; - similar to above.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;notes-for-line-3:656c0d85793f7695097199a3e4d2b870&#34;&gt;Notes for line &lt;strong&gt;3&lt;/strong&gt;:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The body is a block (&lt;code&gt;BlockNode&lt;/code&gt;) which contains &lt;code&gt;ExpressionNode*&lt;/code&gt; (in this case one expression).&lt;/li&gt;
&lt;li&gt;Blocks always contain expressions. The type and value of the block is that of whatever is returned.

&lt;ul&gt;
&lt;li&gt;In this case &lt;code&gt;printf()&lt;/code&gt; always returns the unit/identity/void value (of type &lt;code&gt;Unit&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Thus the block only does something by side-effect.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;example-2-hello-world-script:656c0d85793f7695097199a3e4d2b870&#34;&gt;Example 2: Hello World Script&lt;/h2&gt;

&lt;p&gt;A more correct and portable (to Linux, MacOS, Windows Cygwin) script should be in an executable file of any name.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#!/usr/bin/env hs&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Hello World!&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The key addition is the POSIX magic &lt;code&gt;#!/usr/bin/env hs&lt;/code&gt; which runs the
script text through the &lt;code&gt;hs&lt;/code&gt; (aka. &lt;code&gt;harth-script&lt;/code&gt;) JIT script compiler
and execution engine found on &lt;code&gt;$PATH&lt;/code&gt;. The &lt;code&gt;#!&lt;/code&gt; is always treated as a
comment by &lt;a href=&#34;http://www.harth-lang.org/&#34;&gt;Harth&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;harth-console-panel&#34;&gt;
  &lt;pre class=&#34;harth-console&#34;&gt;
bash$ ls -l /usr/local/bin $HOME/bin
-rwxr-xr-x  1 harveyt  staff  1184 Nov 26 11:04 /usr/local/bin/harth
lrwxr-xr-x  1 harveyt  staff  1184 Nov 26 11:04 /usr/local/bin/harth-script -&amp;gt; /usr/local/bin/harth
lrwxr-xr-x  1 harveyt  staff  1184 Nov 26 11:04 /usr/local/bin/hs -&amp;gt; /usr/local/bin/harth
-rwxr-xr-x  1 harveyt  staff  1184 Nov 26 11:04 /Users/harveyt/bin/HelloWorld
bash$ HelloWorld
Hello World!
bash$
&lt;/pre&gt;
&lt;/div&gt;


&lt;div class=&#34;panel panel-danger&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        TODO
      
    &lt;/h3&gt;
  &lt;/div&gt;
  
    &lt;div class=&#34;panel-body&#34;&gt;
      How to support Windows scripts portably?
    &lt;/div&gt;
  
&lt;/div&gt;


&lt;h2 id=&#34;example-3-hello-world-in-repl:656c0d85793f7695097199a3e4d2b870&#34;&gt;Example 3: Hello World In REPL&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Hello World!&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At an interactive &lt;a href=&#34;http://www.harth-lang.org/&#34;&gt;Harth&lt;/a&gt; shell (or REPL), one can simply execute any statement, expression or program. So the above will result in:&lt;/p&gt;

&lt;div class=&#34;harth-console-panel&#34;&gt;
  &lt;pre class=&#34;harth-console&#34;&gt;
Harth&amp;gt; printf(&amp;#34;Hello World!\n&amp;#34;)
Hello World!\n
Harth&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;


&lt;h3 id=&#34;example-4-the-harth-lang-collection-sequence-class:656c0d85793f7695097199a3e4d2b870&#34;&gt;Example 4: The /Harth/Lang/Collection/Sequence class&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;harth&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Harth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collection&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Harth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Core&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * A Sequence is an abstract finite stream of elements which can be counted, accessed by index.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * &lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * New sequences can be created using Builder, Append(), Prepend() and similar functions.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * &lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * Operations performance may vary from O(1) to O(n) or more. LinearSequence and IndexedSequence&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * provide tighter bounds on performance order.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * &lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * Typically most classes should internally use concrete types such as List&amp;lt;T&amp;gt; or Array&amp;lt;T&amp;gt;, but&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * should return or accept Sequence&amp;lt;T&amp;gt; from methods for maximum usefulness.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;ReverseIterator&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Builder&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Size&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Int32&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covariant&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covariant&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Rest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;%&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covariant&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MakeEmpty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covariant&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covariant&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AppendAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;items&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covariant&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Prepend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covariant&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PrependAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;items&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Iterable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covariant&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;covariant&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Drop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;%&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some things to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Most non-builtin keywords are attributes of the form &lt;code&gt;@name&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;class&lt;/code&gt; can be generic in any number of types, with covariance and contravariance.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;class&lt;/code&gt; can extend any one other &lt;code&gt;class&lt;/code&gt; (and/or zero or more &lt;code&gt;types&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;@abstract&lt;/code&gt; attribute means this class only provides an interface (might turn info a type?)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;T%&lt;/code&gt; type means essentially &amp;ldquo;returns either the generic parameter type &lt;code&gt;T&lt;/code&gt; or an &lt;code&gt;Error&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Doxygen tags and comments are supported in some form.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Non-obvious:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lack of semi-colons.

&lt;ul&gt;
&lt;li&gt;I think Rust or Julia or some other modern language gets this
pretty close to correct, the semi-colon is essentially only needed
to seperate expressions in a &lt;code&gt;{ a; b; }&lt;/code&gt; style block.&lt;/li&gt;
&lt;li&gt;A newline outside of any expression, but in a block is
semantically taken to mean virtual &amp;ldquo;semicolon&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Blocks allow leading/trailing/multiple newlines (and thus
semicolons) inside, they&amp;rsquo;re the equivalent of &amp;ldquo;an expression that
doesn&amp;rsquo;t actually exist&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hey, where&amp;rsquo;s the body?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;example-4-the-harth-lang-collection-basesequence-class:656c0d85793f7695097199a3e4d2b870&#34;&gt;Example 4: The /Harth/Lang/Collection/BaseSequence class&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;harth&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Harth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collection&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Harth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Core&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * BaseSequence provides basic implementation of Sequence using some concrete SeqT type.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * Sub-classes are LinearSequence and IndexedSequence which provide different performance&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * properties for methods; for example Get() and Size() are O(n) and O(1) respectively.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * &lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * Sub-classes must at minimum must provide:&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * - Iterator or ReverseIterator (the opposite has a default implementation)&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * - Builder&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * &lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * Default implementations are provided for all other operations, though these may have terrible&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * performance up to O(n^2). Sub-classes should really override with better performance&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * implementations were possible.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;BaseSequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SeqT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;override&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Iterator&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReverseIterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;override&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;ReverseIterator&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Iterator&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;override&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;Size&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Int32&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/* ... */&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Note property and method overrides.&lt;/li&gt;
&lt;li&gt;Note crazy generics: means derived classes can control return type.

&lt;ul&gt;
&lt;li&gt;Probably will change as type system improves?&lt;/li&gt;
&lt;li&gt;Possibly more type inference too?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Syntax and semantics should always remain:

&lt;ul&gt;
&lt;li&gt;Flexible&lt;/li&gt;
&lt;li&gt;Concise&lt;/li&gt;
&lt;li&gt;Unabiguous.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Fortunately any decent editor running the full lexical to semantic
analysis would be able to display lexical, semantic feed back, possibly on-the
fly (highlighting) and provide errors and documentation as required.

&lt;ul&gt;
&lt;li&gt;See &lt;a href=&#34;http://www.flycheck.org&#34;&gt;Emacs FlyCheck&lt;/a&gt; for an example of this working in other languages pretty well.&lt;/li&gt;
&lt;li&gt;Emacs basically requires a very good text to reflection system
underneath the hood. Languages such as Python and C# tend to
provide this these days. Therefore &lt;a href=&#34;http://www.harth-lang.org/&#34;&gt;Harth&lt;/a&gt; must and will, builtin, free, easy.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;panel panel-info&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        Info
      
    &lt;/h3&gt;
  &lt;/div&gt;
  
    &lt;div class=&#34;panel-body&#34;&gt;
      The TODO notes and some semi-colons have been removed from the source. Hey it&amp;#39;s a prototype. Whatevers.
    &lt;/div&gt;
  
&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;warning:656c0d85793f7695097199a3e4d2b870&#34;&gt;Warning&lt;/h1&gt;

&lt;p&gt;&lt;div class=&#34;panel panel-warning&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        Warning
      
    &lt;/h3&gt;
  &lt;/div&gt;
  
    &lt;div class=&#34;panel-body&#34;&gt;
      All the syntax and semantics discussed here are simplified, reality is likely to be more complex, different and changing.
    &lt;/div&gt;
  
&lt;/div&gt;
&lt;/p&gt;

&lt;!-- Local Variables: --&gt;

&lt;!-- indent-tabs-mode: nil --&gt;

&lt;!-- End: --&gt;
</description>
    </item>
    
    <item>
      <title>Test Blog Page</title>
      <link>http://www.harth-lang.org/blog/2016/02/24/test-blog-page/</link>
      <pubDate>Wed, 24 Feb 2016 11:38:50 -0800</pubDate>
      
      <guid>http://www.harth-lang.org/blog/2016/02/24/test-blog-page/</guid>
      <description>

&lt;h1 id=&#34;reason:f7973322a3a603033225704c216a4c0b&#34;&gt;Reason&lt;/h1&gt;

&lt;p&gt;This blog is a test page. It&amp;rsquo;s meant to test the &lt;a href=&#34;https://github.com/harthsw/harth-hugo-theme&#34;&gt;Harth-Hugo-Theme&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;code-shortcode:f7973322a3a603033225704c216a4c0b&#34;&gt;Code Shortcode&lt;/h2&gt;

&lt;p&gt;Example code block:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define IABS(x) ((x) &amp;lt; 0 ? -(x) : (x))&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;cm&#34;&gt;/* An annoying &amp;quot;Hello World&amp;quot; example */&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xFFFF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;unordered_map&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\\\&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// this is an error&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2e3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Thing&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Thing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;CallFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Thing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CallFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	    &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;oops&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Error: %s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;code-shortcode-2:f7973322a3a603033225704c216a4c0b&#34;&gt;Code Shortcode 2&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;thing&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;That&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;XXX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Int&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;%s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;inline-code:f7973322a3a603033225704c216a4c0b&#34;&gt;Inline Code&lt;/h2&gt;

&lt;p&gt;Calling the function &lt;code&gt;CallFunc()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;inline-key-press:f7973322a3a603033225704c216a4c0b&#34;&gt;Inline Key Press&lt;/h2&gt;

&lt;p&gt;Press the following keys to quit: 
  
  
    &lt;span class=&#34;harth-key&#34;&gt;&amp;#8984&lt;/span&gt;
  
    

  
  +
  
  
    &lt;span class=&#34;harth-key&#34;&gt;Q&lt;/span&gt;
  
    

&lt;/p&gt;

&lt;h2 id=&#34;sample-console-output:f7973322a3a603033225704c216a4c0b&#34;&gt;Sample Console Output&lt;/h2&gt;

&lt;div class=&#34;harth-console-panel&#34;&gt;
  &lt;pre class=&#34;harth-console&#34;&gt;
Sample console output
Stuff
********************************************************************************
End
&lt;/pre&gt;
&lt;/div&gt;


&lt;h2 id=&#34;various-panels:f7973322a3a603033225704c216a4c0b&#34;&gt;Various Panels&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Success &lt;div class=&#34;panel panel-success&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        It worked!
      
    &lt;/h3&gt;
  &lt;/div&gt;
  
    
      &lt;div class=&#34;panel-body&#34;&gt;
	Which is nice.
      &lt;/div&gt;
    
  
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Info &lt;div class=&#34;panel panel-info&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        Info
      
    &lt;/h3&gt;
  &lt;/div&gt;
  
    &lt;div class=&#34;panel-body&#34;&gt;
      Remember to add this.
    &lt;/div&gt;
  
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Warning &lt;div class=&#34;panel panel-warning&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        Warning
      
    &lt;/h3&gt;
  &lt;/div&gt;
  
    &lt;div class=&#34;panel-body&#34;&gt;
      Do not do this.
    &lt;/div&gt;
  
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Error - &lt;div class=&#34;panel panel-danger&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        Error
      
    &lt;/h3&gt;
  &lt;/div&gt;
  
    &lt;div class=&#34;panel-body&#34;&gt;
      Oh dear
    &lt;/div&gt;
  
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;todo:f7973322a3a603033225704c216a4c0b&#34;&gt;TODO&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;TODO &lt;div class=&#34;panel panel-danger&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        TODO
      
    &lt;/h3&gt;
  &lt;/div&gt;
  
    &lt;div class=&#34;panel-body&#34;&gt;
      Remember to add a thing.
    &lt;/div&gt;
  
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;todo-list:f7973322a3a603033225704c216a4c0b&#34;&gt;TODO List&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;panel panel-danger&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h3 class=&#34;panel-title&#34;&gt;
      
        TODO
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class=&#34;panel-body&#34;&gt;
    &lt;ul&gt;
&lt;li&gt;Thing&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>